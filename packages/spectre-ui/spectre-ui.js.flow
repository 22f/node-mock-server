// @flow



/**

	Button

**/
export type ButtonTypeType = "button" | "submit" | "reset";
export type ButtonModifierType = "primary" | "link" | "action" | "action circle";
export type ButtonSizeType = "sm" | "lg" | "block";
export type ButtonClassPropsType = {
	modifier?: ButtonModifierType,
	size?: ButtonSizeType,
	className?: string,
	loading?: boolean
};
export type ButtonDefaultPropsType = {
	disabled?: boolean,
	tabIndex?: number,
	type?: ButtonTypeType,
	label?: string,
	onClick?: Function
};
export type ButtonPropsType = ButtonClassPropsType & ButtonDefaultPropsType;
declare module "spectre-ui/Button" {
	declare export default function Button(ButtonPropsType): React$Element<*>;
}



/**

	Typography

**/
export type HeadingTypeEnumType = "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
export type HeadingClassPropsType = {
	type?: HeadingTypeEnumType,
	className?: string
};
export type HeadingDefaultPropsType = {
	children?: React$Node,
	tag?: string
};
export type HeadingPropsType = HeadingClassPropsType & HeadingDefaultPropsType;
export type BlockquotePropsType = {
	children?: React$Node,
	className?: string
};
export type ParagraphPropsType = {
	children?: React$Node,
	innerHtml?: string,
	lang?: string,
	className?: string
};
export type ListTypeEnumType = "ul" | "ol" | "dl";
export type ListEntryObjectType = {
	name: string,
	entries: Array<ListEntryType>
};
export type ListEntryType = string | ListEntryObjectType;
export type ListEntriesType = Array<ListEntryType>;
export type ListPropsType = {
	entries: ListEntriesType,
	type?: ListTypeEnumType,
	className?: string,
	classNameEntry?: string
};
declare module "spectre-ui/Typography" {
	declare export default function Heading(HeadingPropsType): React$Element<*>;
	declare export default function Paragraph(ParagraphPropsType): React$Element<*>;
	declare export default function Blockquote(BlockquotePropsType): React$Element<*>;
	declare export default class List extends React$Component<ListPropsType> {}
}

export type TableModifierEnumType = "striped" | "hover";
export type TableValueType = string | number;
export type TableArrayType = Array<Array<TableValueType>>;
export type TableClassPropsType = {
	modifiers?: Array<TableModifierEnumType>,
	className?: string,
};
export type TableDefaultPropsType = {
	head?: TableArrayType,
	body?: TableArrayType,
	classNameHead?: string,
	classNameHeadRow?: string,
	classNameHeadCell?: string,
	classNameBody?: string,
	classNameBodyRow?: string,
	classNameBodyCell?: string,
	activeRow?: number
};
export type TablePropsType = TableClassPropsType & TableDefaultPropsType;
declare module "spectre-ui/Table" {
	declare export default class Table extends React$Component<TablePropsType> {}
}



/**

	Forms/Input

**/
export type InputOverridePropsType = {
	id?: string,
	type?: string,
	name?: string,
};
export type InputDefaultPropsType = {
	className?: string,
	autoComplete?: string,
	autoFocus?: boolean,
	checked?: boolean,
	defaultChecked?: boolean,
	onKeyUp?: (event: SyntheticKeyboardEvent<>) => void,
	onKeyDown?: (event: SyntheticKeyboardEvent<>) => void,
	onBlur?: (event: SyntheticFocusEvent<>) => void,
	onChange?: (event: SyntheticInputEvent<>) => void,
	onFocus?: (event: SyntheticFocusEvent<>) => void,
	onDirty?: () => void,
	onClean?: () => void,
	inputRef?: (node: HTMLElement) => void,
	placeholder?: string,
	rows?: string | number,
	rowsMax?: string | number,
	value?: string | number | Array<string | number>,
	multiline?: boolean,
	disabled?: boolean,
	required?: boolean,
	readOnly?: boolean,
	defaultValue?: string | number,
	error?: boolean,
	inputProps?: Object
};
export type InputPropsType = InputDefaultPropsType & InputOverridePropsType;
export type DirtyCheckObjType = HTMLInputElement | null | InputPropsType;
export type InputStateType = {
	focused: boolean
};
export type LabelPropsType = {
	children: React$Node,
	className?: string,
	htmlFor?: string
};
export type GroupPropsType = {
	children: React$Node,
	className?: string
};
export type TextFieldDefaultPropsType = {
	id: string,
	name?: string,
	label?: string,
	classNameLabel?: string,
	classNameInput?: string
};
export type TextFieldPropsType = InputDefaultPropsType & TextFieldDefaultPropsType;

export type LabeledInputTypeEnumType = "checkbox" | "radio" | "switch";
export type LabeledInputOverridePropsType = {
	type?: LabeledInputTypeEnumType,
	name?: string,
};
export type LabeledInputDefaultPropsType = {
	id: string,
	label: string,
	classNameLabel?: string,
	classNameIcon?: string
};
export type LabeledInputPropsType = InputDefaultPropsType & LabeledInputOverridePropsType & LabeledInputDefaultPropsType;

export type CheckboxTypeEnumType = "checkbox" | "switch";
export type CheckboxOverridePropsType = {
	type?: CheckboxTypeEnumType,
	asSwitch?: boolean
};
export type CheckboxDefaultPropsType = {
	classNameGroup?: string,
};
export type CheckboxPropsType = InputDefaultPropsType & LabeledInputDefaultPropsType & CheckboxOverridePropsType & CheckboxDefaultPropsType;
export type SwitchPropsType = InputDefaultPropsType & LabeledInputDefaultPropsType & CheckboxDefaultPropsType;

export type SelectOptionPropsType = {
	name: string,
	value?: string
};
export type SelectPropsType = {
	id?: string,
	className?: string,
	classNameOption?: string,
	multiple?: boolean,
	autoFocus?: boolean,
	onKeyUp?: (event: SyntheticKeyboardEvent<>) => void,
	onKeyDown?: (event: SyntheticKeyboardEvent<>) => void,
	onBlur?: (event: SyntheticFocusEvent<>) => void,
	onChange?: (event: SyntheticInputEvent<>) => void,
	onFocus?: (event: SyntheticFocusEvent<>) => void,
	inputRef?: (node: HTMLElement) => void,
	chooseText?: string,
	value?: string | number,
	defaultValue?: string | number,
	name?: string,
	disabled?: boolean,
	required?: boolean,
	readOnly?: boolean,
	error?: boolean,
	entries?: Array<SelectOptionPropsType>,
	selectProps?: Object,
};
export type SelectStateType = {
	focused: boolean
};
export type RadioDefaultPropsType = {
	name: string,
};
export type RadioPropsType = RadioDefaultPropsType & InputDefaultPropsType & LabeledInputDefaultPropsType;
export type RadioEntryPropsType = InputDefaultPropsType & LabeledInputDefaultPropsType;
export type RadiosPropsType = {
	name: string,
	label?: string,
	value?: string,
	defaultValue?: string,
	entries: Array<RadioEntryPropsType>
};
declare module "spectre-ui/Forms" {
	declare export default class Input extends React$Component<InputPropsType, InputStateType> {}
	declare export default class Select extends React$Component<SelectPropsType, SelectStateType> {}
	declare export default function Label(LabelPropsType): React$Element<*>;
	declare export default function Group(GroupPropsType): React$Element<*>;
	declare export default function LabeledInput(LabeledInputPropsType): React$Element<*>;
	declare export default function Checkbox(CheckboxPropsType): React$Element<*>;
	declare export default function Switch(SwitchPropsType): React$Element<*>;
	declare export default function Radio(RadioPropsType): React$Element<*>;
	declare export default function Radios(RadiosPropsType): React$Element<*>;
}

export type ToastTypeEnumType = "" | "primary" | "success" | "warning" | "error";
export type ToastPropsType = {
	title?: string,
	text?: string,
	className?: string,
	classNameTitle?: string,
	classNameButton?: string,
	closable?: boolean,
	onClickClose?: (event: SyntheticMouseEvent<>) => void,
	onClickBackground?: (event: SyntheticMouseEvent<>) => void,
	type?: ToastTypeEnumType
};
declare module "spectre-ui/Toast" {
	declare export default function Toast(ToastPropsType): React$Element<*>;
}

export type NotificationRenderArgsType = {
	handleCloseNotification?: (event: SyntheticMouseEvent<>) => void,
};
export type NotificationType = {
	channel?: string,
	delay?: number,
	render: (NotificationRenderArgsType) => React$Element<*>,
};
export type NotificationInnerDefaultType = {
	id: string,
};
export type NotificationInnerType = NotificationType & NotificationInnerDefaultType;
export type NotificationsPropsType = {
	channel?: string
};
export type NotificationsStateType = {
	notifications?: { [key: string]: NotificationInnerType }
};
declare module "spectre-ui/Notifications" {
	declare export default class Notifications extends React$Component<NotificationsPropsType, NotificationsStateType> {}
}

export type ContainerSizeEnumType = "xs" | "sm" | "md" | "lg" | "xl";
export type ContainerPropsType = {
	children: React$Node,
	size?: ContainerSizeEnumType,
	className?: string
};
export type RowPropsType = {
	children: React$Node,
	className?: string,
	gapless?: boolean,
	oneline?: boolean,
};
export type ColumnSizeEnumType = 1 | 2Â | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
export type ColumnAlignEnumType = "center" | "right" | "left";
export type ColumnPropsType = {
	children: React$Node,
	className?: string,
	flex?: ColumnSizeEnumType,
	xs?: ColumnSizeEnumType,
	sm?: ColumnSizeEnumType,
	md?: ColumnSizeEnumType,
	lg?: ColumnSizeEnumType,
	xl?: ColumnSizeEnumType,
	align?: ColumnAlignEnumType
};
declare module "spectre-ui/Grid" {
	declare export default function Container(ContainerPropsType): React$Element<*>;
	declare export default function Row(RowPropsType): React$Element<*>;
	declare export default function Column(ColumnPropsType): React$Element<*>;
}
