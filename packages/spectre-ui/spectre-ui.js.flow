// @flow



/** Button **/
export type ButtonTypeType = "button" | "submit" | "reset";
export type ButtonModifierType = "primary" | "link" | "action" | "action circle";
export type ButtonSizeType = "sm" | "lg" | "block";
export type ButtonClassPropsType = {
	modifier?: ButtonModifierType,
	size?: ButtonSizeType,
	className?: string,
	loading?: boolean
};
export type ButtonDefaultPropsType = {
	disabled?: boolean,
	tabIndex?: number,
	type?: ButtonTypeType,
	label?: string,
	onClick?: Function
};
export type ButtonPropsType = ButtonClassPropsType & ButtonDefaultPropsType;
declare module "spectre-ui/Button" {
	declare export type ButtonTypeType = ButtonTypeType;
	declare export type ButtonModifierType = ButtonModifierType;
	declare export type ButtonSizeType = ButtonSizeType;
	declare export type ButtonClassPropsType = ButtonClassPropsType;
	declare export type ButtonDefaultPropsType = ButtonDefaultPropsType;
	declare export type ButtonPropsType = ButtonPropsType;
	declare class Button extends React$Component<ButtonPropsType> {}
	declare export default typeof Button;
}


/** Typography **/
export type HeadingTypeEnumType = "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
export type HeadingClassPropsType = {
	type?: HeadingTypeEnumType,
	className?: string
};
export type HeadingDefaultPropsType = {
	children?: React$Node,
	tag?: string
};
export type HeadingPropsType = HeadingClassPropsType & HeadingDefaultPropsType;
export type BlockquotePropsType = {
	children?: React$Node,
	className?: string
};
export type ParagraphPropsType = {
	children?: React$Node,
	innerHtml?: string,
	lang?: string,
	className?: string
};
export type ListTypeEnumType = "ul" | "ol" | "dl";
export type ListEntryObjectType = {
	name: string,
	entries: Array<ListEntryType>
};
export type ListEntryType = string | ListEntryObjectType;
export type ListEntriesType = Array<ListEntryType>;
export type ListPropsType = {
	entries: ListEntriesType,
	type?: ListTypeEnumType,
	className?: string,
	classNameEntry?: string
};
declare module "spectre-ui/Typography" {
	declare export type HeadingTypeEnumType = HeadingTypeEnumType;
	declare export type HeadingClassPropsType = HeadingClassPropsType;
	declare export type HeadingDefaultPropsType = HeadingDefaultPropsType;
	declare export type HeadingPropsType = HeadingPropsType;
	declare class Heading extends React$Component<HeadingPropsType> {}

	declare export type ParagraphPropsType = ParagraphPropsType;
	declare class Paragraph extends React$Component<ParagraphPropsType> {}

	declare export type BlockquotePropsType = BlockquotePropsType;
	declare class Blockquote extends React$Component<BlockquotePropsType> {}

	declare export type ListTypeEnumType = ListTypeEnumType;
	declare export type ListEntryObjectType = ListEntryObjectType;
	declare export type ListEntryType = ListEntryType;
	declare export type ListEntriesType = ListEntriesType;
	declare export type ListPropsType = ListPropsType;
	declare class List extends React$Component<ListPropsType> {}
}

/** Table **/
export type TableModifierEnumType = "striped" | "hover";
export type TableValueType = string | number;
export type TableArrayType = Array<Array<TableValueType>>;
export type TableClassPropsType = {
	modifiers?: Array<TableModifierEnumType>,
	className?: string,
};
export type TableDefaultPropsType = {
	head?: TableArrayType,
	body?: TableArrayType,
	classNameHead?: string,
	classNameHeadRow?: string,
	classNameHeadCell?: string,
	classNameBody?: string,
	classNameBodyRow?: string,
	classNameBodyCell?: string,
	activeRow?: number
};
export type TablePropsType = TableClassPropsType & TableDefaultPropsType;
declare module "spectre-ui/Table" {
	declare export type TableModifierEnumType = TableModifierEnumType;
	declare export type TableValueType = TableValueType;
	declare export type TableArrayType = TableArrayType;
	declare export type TableClassPropsType = TableClassPropsType;
	declare export type TableDefaultPropsType = TableDefaultPropsType;
	declare export type TablePropsType = TablePropsType;
	declare class Table extends React$Component<TablePropsType> {}
	declare export default typeof Table;
}



/** Forms **/
export type InputOverridePropsType = {
	id?: string,
	type?: string,
	name?: string,
};
export type InputDefaultPropsType = {
	className?: string,
	autoComplete?: string,
	autoFocus?: boolean,
	checked?: boolean,
	defaultChecked?: boolean,
	onKeyUp?: (event: SyntheticKeyboardEvent<>) => void,
	onKeyDown?: (event: SyntheticKeyboardEvent<>) => void,
	onBlur?: (event: SyntheticFocusEvent<>) => void,
	onChange?: (event: SyntheticInputEvent<>) => void,
	onFocus?: (event: SyntheticFocusEvent<>) => void,
	onDirty?: () => void,
	onClean?: () => void,
	inputRef?: (node: HTMLElement) => void,
	placeholder?: string,
	rows?: string | number,
	rowsMax?: string | number,
	value?: string | number | Array<string | number>,
	multiline?: boolean,
	disabled?: boolean,
	required?: boolean,
	readOnly?: boolean,
	defaultValue?: string | number,
	error?: boolean,
	inputProps?: Object
};
export type InputPropsType = InputDefaultPropsType & InputOverridePropsType;
export type DirtyCheckObjType = HTMLInputElement | null | InputPropsType;
export type InputStateType = {
	focused: boolean
};
export type LabelPropsType = {
	children: React$Node,
	className?: string,
	htmlFor?: string
};
export type GroupPropsType = {
	children: React$Node,
	className?: string
};
export type TextFieldDefaultPropsType = {
	id: string,
	name?: string,
	label?: string,
	classNameLabel?: string,
	classNameInput?: string
};
export type TextFieldPropsType = InputDefaultPropsType & TextFieldDefaultPropsType;

export type LabeledInputTypeEnumType = "checkbox" | "radio" | "switch";
export type LabeledInputOverridePropsType = {
	type?: LabeledInputTypeEnumType,
	name?: string,
};
export type LabeledInputDefaultPropsType = {
	id: string,
	label: string,
	classNameLabel?: string,
	classNameIcon?: string
};
export type LabeledInputPropsType = InputDefaultPropsType & LabeledInputOverridePropsType & LabeledInputDefaultPropsType;

export type CheckboxTypeEnumType = "checkbox" | "switch";
export type CheckboxOverridePropsType = {
	type?: CheckboxTypeEnumType,
	asSwitch?: boolean
};
export type CheckboxDefaultPropsType = {
	classNameGroup?: string,
};
export type CheckboxPropsType = InputDefaultPropsType & LabeledInputDefaultPropsType & CheckboxOverridePropsType & CheckboxDefaultPropsType;
export type SwitchPropsType = InputDefaultPropsType & LabeledInputDefaultPropsType & CheckboxDefaultPropsType;

export type SelectOptionPropsType = {
	name: string,
	value?: string
};
export type SelectPropsType = {
	id?: string,
	className?: string,
	classNameOption?: string,
	multiple?: boolean,
	autoFocus?: boolean,
	onKeyUp?: (event: SyntheticKeyboardEvent<>) => void,
	onKeyDown?: (event: SyntheticKeyboardEvent<>) => void,
	onBlur?: (event: SyntheticFocusEvent<>) => void,
	onChange?: (event: SyntheticInputEvent<>) => void,
	onFocus?: (event: SyntheticFocusEvent<>) => void,
	inputRef?: (node: HTMLElement) => void,
	chooseText?: string,
	value?: string | number,
	defaultValue?: string | number,
	name?: string,
	disabled?: boolean,
	required?: boolean,
	readOnly?: boolean,
	error?: boolean,
	entries?: Array<SelectOptionPropsType>,
	selectProps?: Object,
};
export type SelectStateType = {
	focused: boolean
};
export type RadioDefaultPropsType = {
	name: string,
};
export type RadioPropsType = RadioDefaultPropsType & InputDefaultPropsType & LabeledInputDefaultPropsType;
export type RadioEntryPropsType = InputDefaultPropsType & LabeledInputDefaultPropsType;
export type RadiosPropsType = {
	name: string,
	label?: string,
	value?: string,
	defaultValue?: string,
	entries: Array<RadioEntryPropsType>
};
declare module "spectre-ui/Forms" {
	declare export type InputPropsType = InputPropsType;
	declare class Input extends React$Component<InputPropsType, InputStateType> {}

	declare export type SelectPropsType = SelectPropsType;
	declare class Select extends React$Component<SelectPropsType, SelectStateType> {}

	declare export type LabelPropsType = LabelPropsType;
	declare class Label extends React$Component<LabelPropsType> {}

	declare export type GroupPropsType = GroupPropsType;
	declare class Group extends React$Component<GroupPropsType> {}

	declare export type LabeledInputPropsType = LabeledInputPropsType;
	declare class LabeledInput extends React$Component<LabeledInputPropsType> {}

	declare export type CheckboxPropsType = CheckboxPropsType;
	declare class Checkbox extends React$Component<CheckboxPropsType> {}

	declare export type SwitchPropsType = SwitchPropsType;
	declare class Switch extends React$Component<SwitchPropsType> {}

	declare export type RadioPropsType = RadioPropsType;
	declare class Radio extends React$Component<RadioPropsType> {}

	declare export type RadiosPropsType = RadiosPropsType;
	declare class Radios extends React$Component<RadiosPropsType> {}
}

/** Toast **/
export type ToastTypeEnumType = "" | "primary" | "success" | "warning" | "error";
export type ToastPropsType = {
	title?: string,
	text?: string,
	className?: string,
	classNameTitle?: string,
	classNameButton?: string,
	closable?: boolean,
	onClickClose?: (event: SyntheticMouseEvent<>) => void,
	onClickBackground?: (event: SyntheticMouseEvent<>) => void,
	type?: ToastTypeEnumType
};
declare module "spectre-ui/Toast" {
	declare export type ToastTypeEnumType = ToastTypeEnumType;
	declare export type ToastPropsType = ToastPropsType;
	declare class Toast extends React$Component<ToastPropsType> {}
	declare export default typeof Toast;
}

/** Notifications **/
export type NotificationRenderArgsType = {
	handleCloseNotification?: (event: SyntheticMouseEvent<>) => void,
};
export type NotificationType = {
	channel?: string,
	delay?: number,
	render: (NotificationRenderArgsType) => React$Element<*>,
};
export type NotificationInnerDefaultType = {
	id: string,
};
export type NotificationInnerType = NotificationType & NotificationInnerDefaultType;
export type NotificationsPropsType = {
	channel?: string
};
export type NotificationsStateType = {
	notifications?: { [key: string]: NotificationInnerType }
};
declare module "spectre-ui/Notifications" {
	declare export type NotificationRenderArgsType = NotificationRenderArgsType;
	declare export type NotificationType = NotificationType;
	declare export type NotificationInnerDefaultType = NotificationInnerDefaultType;
	declare export type NotificationInnerType = NotificationInnerType;
	declare export type NotificationsPropsType = NotificationsPropsType;
	declare export type NotificationsStateType = NotificationsStateType;
	declare class Notifications extends React$Component<NotificationsPropsType, NotificationsStateType> {}
	declare export default typeof Notifications;
}

/** Grid **/
export type ContainerSizeEnumType = "xs" | "sm" | "md" | "lg" | "xl";
export type ContainerPropsType = {
	children: React$Node,
	size?: ContainerSizeEnumType,
	className?: string
};
export type RowPropsType = {
	children: React$Node,
	className?: string,
	gapless?: boolean,
	oneline?: boolean,
};
export type ColumnSizeEnumType = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
export type ColumnAlignEnumType = "center" | "right" | "left";
export type ColumnPropsType = {
	children: React$Node,
	className?: string,
	flex?: ColumnSizeEnumType,
	xs?: ColumnSizeEnumType,
	sm?: ColumnSizeEnumType,
	md?: ColumnSizeEnumType,
	lg?: ColumnSizeEnumType,
	xl?: ColumnSizeEnumType,
	align?: ColumnAlignEnumType
};
declare module "spectre-ui/Grid" {

	declare export type ContainerSizeEnumType = ContainerSizeEnumType;
	declare export type ContainerPropsType = ContainerPropsType;
	declare class Container extends React$Component<ContainerPropsType> {}

	declare export type RowPropsType = RowPropsType;
	declare class Row extends React$Component<RowPropsType> {}

	declare export type ColumnSizeEnumType = ColumnSizeEnumType;
	declare export type ColumnAlignEnumType = ColumnAlignEnumType;
	declare export type ColumnPropsType = ColumnPropsType;
	declare class Column extends React$Component<ColumnPropsType> {}
}
